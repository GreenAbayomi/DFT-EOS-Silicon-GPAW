# -*- coding: utf-8 -*-
"""DFT_Silicon_GPAW.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OdtY8lBQO7RMKBp3OwmdKnhQpwMb9HK9
"""

!pip install ase gpaw
!pip install ase matplotlib numpy scipy pandas
!wget https://wiki.fysik.dtu.dk/gpaw-files/gpaw-setups-0.9.20000.tar.gz
!tar -xzf gpaw-setups-0.9.20000.tar.gz

# --Imports --
import numpy as np
import matplotlib.pyplot as plt
from ase.build import bulk
from gpaw import GPAW, FermiDirac, PW
from ase.units import kJ
from scipy.optimize import curve_fit

# Birch-Murnaghan EOS
def birch_murnaghan(V, E0, B0, B0p, V0):
    return E0 + (9*V0*B0/16)*(((V0/V)**(2/3)-1)**3*B0p +
                               ((V0/V)**(2/3)-1)**2*(6-4*(V0/V)**(2/3)))

# -- EOS Calculation for Si --
a0 = 5.43  # initial guess lattice constant (Å)
strains = np.linspace(-0.08, 0.08, 7)  # compress/expand around a0

volumes, energies = [], []

for s in strains:
    a = a0 * (1+s)
    atoms = bulk("Si", "diamond", a=a)
    calc = GPAW(mode='pw', xc='PBE',
                kpts={'density': 3.5, 'gamma': True},
                occupations=FermiDirac(0.1),
                txt=None)   # suppress long output
    atoms.calc = calc
    e = atoms.get_potential_energy()
    v = atoms.get_volume()
    volumes.append(v)
    energies.append(e)

volumes, energies = np.array(volumes), np.array(energies)

# -- Fit EOS --
popt, _ = curve_fit(birch_murnaghan, volumes, energies,
                    p0=[min(energies), 1.0, 4.0, volumes[np.argmin(energies)]])

E0, B0, B0p, V0 = popt
B0_GPa = B0 / (1e21 / kJ)  # convert to GPa

# --- STEP 6: Plot ---
Vfit = np.linspace(min(volumes), max(volumes), 100)
Efit = birch_murnaghan(Vfit, *popt)

plt.figure()
plt.scatter(volumes, energies, color="red", label="DFT data (Si)")
plt.plot(Vfit, Efit, label="Birch-Murnaghan fit")
plt.xlabel("Volume (Å³)")
plt.ylabel("Energy (eV)")
plt.legend()
plt.title(f"Si EOS with GPAW (Bulk modulus ≈ {B0_GPa:.2f} GPa)")
plt.show()

print("Fitted bulk modulus (GPa):", B0_GPa)

# Build diamond-structured silicon with experimental lattice constant
a0 = 5.43
si = bulk('Si', 'diamond', a=a0)

calc = GPAW(mode=PW(300),       # plane wave cutoff in eV
            kpts=(6,6,6),       # k-point grid
            xc='PBE',           # exchange-correlation
            occupations={'name': 'fermi-dirac', 'width':0.01},
            txt='si_gs.txt')

si.calc = calc
energy = si.get_potential_energy()  # triggers calculation
calc.write('si_gs.gpw', mode='all') # save wavefunctions

from ase.dft.kpoints import bandpath

# High-symmetry points in FCC Brillouin zone
points = {'G': [0, 0, 0],
          'X': [0.5, 0, 0],
          'W': [0.5, 0.25, 0.75],
          'L': [0.5, 0.5, 0.5]}

path = bandpath(points, si.cell, npoints=60)

bs_calc = GPAW('si_gs.gpw').fixed_density(
    kpts=path.kpts,
    symmetry='off',
    txt='si_bands.txt')

bs_calc.write('si_bands.gpw', mode='all')

# Reload the band structure calculation
bs_calc = GPAW('si_bands.gpw')
efermi = bs_calc.get_fermi_level()

# Get k-point axis for plotting
x, X, labels = path.get_linear_kpoint_axis()

# Collect eigenvalues for each k-point
energies = []
for k in range(len(path.kpts)):
    eigs = bs_calc.get_eigenvalues(kpt=k)  # array of band energies
    energies.append(eigs)
energies = np.array(energies)  # shape = (nkpts, nbands)

# Plot
plt.figure(figsize=(6,4))
for band in energies.T:
    plt.plot(x, band - efermi, 'b-')

plt.axhline(0, color='k', linestyle='--')

# High-symmetry point labels (replace G with Γ for nice formatting)
labels = [lbl if lbl != 'G' else 'Γ' for lbl in labels]
plt.xticks(X, labels)

plt.ylabel('Energy (eV, relative to Ef)')
plt.title('Band structure of Silicon (PBE)')
plt.show()

# --- 1. Build Silicon Crystal ---
atoms = bulk('Si', 'diamond', a)

# --- 2. Ground-state DFT calculation (SCF) ---
calc = GPAW(mode='pw',                  # Plane-wave mode
            xc='PBE',                   # Exchange-correlation functional
            kpts=(4,4,4),               # Brillouin zone sampling
            nbands=-20,                 # add ~20 empty bands above Fermi level
            occupations=FermiDirac(0.01), # small smearing
            txt='si_gs.txt')

atoms.calc = calc
energy = atoms.get_potential_energy()

# Save all results (wavefunctions, occupations, eigenvalues, etc.)
calc.write('si_gs.gpw', mode='all')

print("Ground-state energy (eV):", energy)

from gpaw import restart

atoms, calc = restart('si_gs.gpw')

# Fermi energy
ef = calc.get_fermi_level()

# Get DOS (GPAW built-in, Gaussian smearing)
energies, dos = calc.get_dos(width=0.2)   # width in eV

# Shift energies relative to Ef
energies_shifted = energies - ef

# Plot
plt.figure(figsize=(6,4))
plt.plot(energies_shifted, dos, label='Si DOS')
plt.axvline(0, color='k', linestyle='--', label='Fermi level')
plt.xlabel('Energy (eV, relative to Ef)')
plt.ylabel('DOS (states/eV)')
plt.title('Density of States for Silicon (PBE)')
plt.legend()
plt.grid(True)
plt.show()